/**
 * Majority Judgment API
 * This is a **deliberation service** using **majority judgment** polling. It\'s **libre software** ([source](https://github.com/mieuxvoter)) made and maintained by [MieuxVoter.fr](https://mieuxvoter.fr). You\'re browsing the API documentation and sandbox.  ## Use one of the known clients  - TODO: add an URL to a client of the API   ## Try it out the hard way  ### Create an account  You will need a user account to interact with polls. Head to **Registration** â†’ `POST /users` below. Click _Try it out_, set your desired credentials, and execute the query. Scroll down to see the response.  ### Authenticate  Use your credentials in the **Login** â†’ `POST /_jwt`, and the API will return a Json Web Token valid for one hour. Copy the token (not the whole response, and without quotes) in the field behind the `Authorize ðŸ”’` button.  ### Create a poll  **Poll** â†’ `POST /polls`  Keep the response, you\'ll need the uuids.  > TODO: document invitation generation  ### Submit judgments  **Ballot** â†’ `POST /polls/{pollId}/proposals/{proposalId}/ballots`  One request per proposal, for now.  We plan on making an endpoint to submit them all at once.  ### Collect the results  **Result** â†’ `GET /polls/{id}/result`  ## Use a generated client library  - for php  (link!) - for typescript-node  (link!!) - â€¦  There are clients we can generate for most languages. Get in touch if you\'d like one in particular! Or clone this project and use `bin/generate-client.bash -t whatever`. 
 *
 * The version of the OpenAPI document: 0.0.0-dev
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { GradejsonldRead } from './gradejsonldRead';
import { ProposaljsonldRead } from './proposaljsonldRead';

/**
* A Liquid Majority Judgment Poll.
*/
export class PolljsonldRead {
    'context'?: string;
    'id'?: string;
    'type'?: string;
    /**
    * A Universally Unique IDentifier (version 4) like b7e7d328-c1fb-4af7-b258-23d08f6ed2d4 and you may use the short prefix to fetch a poll as well, like b7e7d328 or even b7e-7d-328 to make it more human-legible.
    */
    'uuid'?: string;
    /**
    * A unique, short, human-friendly identifier for the Poll.
    */
    'slug'?: string;
    /**
    * The scope defines how and by whom the poll is accessible: `public`: Everyone may access the poll, and it will be publicly listed ; `unlisted`: Everyone may access the poll if they know its URI ; `private`: Only invited participants may participate ; The default scope is `unlisted`.
    */
    'scope'?: string;
    /**
    * The subject of the poll. Careful consideration should be taken in the writing of this.
    */
    'subject': string;
    /**
    * A list of Proposals to judge, that MUST contain at least two proposals, and can have at most 256 proposals but that upper limit is arbitrary and may wildly vary after benchmark and discussion.
    */
    'proposals'?: Array<ProposaljsonldRead>;
    /**
    * A list of Grades that Participants may give to Proposals â€“ That list MUST contain at least two Grades, and at most 16 (another arbitrary limit to discuss).
    */
    'grades'?: Array<GradejsonldRead>;
    /**
    * Can the current user generate invitations for this poll or not? Helps clients show the relevant links and forms.
    */
    'canGenerateInvitations'?: boolean;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "context",
            "baseName": "@context",
            "type": "string"
        },
        {
            "name": "id",
            "baseName": "@id",
            "type": "string"
        },
        {
            "name": "type",
            "baseName": "@type",
            "type": "string"
        },
        {
            "name": "uuid",
            "baseName": "uuid",
            "type": "string"
        },
        {
            "name": "slug",
            "baseName": "slug",
            "type": "string"
        },
        {
            "name": "scope",
            "baseName": "scope",
            "type": "string"
        },
        {
            "name": "subject",
            "baseName": "subject",
            "type": "string"
        },
        {
            "name": "proposals",
            "baseName": "proposals",
            "type": "Array<ProposaljsonldRead>"
        },
        {
            "name": "grades",
            "baseName": "grades",
            "type": "Array<GradejsonldRead>"
        },
        {
            "name": "canGenerateInvitations",
            "baseName": "canGenerateInvitations",
            "type": "boolean"
        }    ];

    static getAttributeTypeMap() {
        return PolljsonldRead.attributeTypeMap;
    }
}

